'\" te
.\" Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
.\" Copyright (c) 2012, OmniTI Computer Consulting, Inc. All rights reserved.
.\" Copyright 2022 OmniOS Community Edition (OmniOSce) Association.
.Dd November 16, 2022
.Dt PKG 7
.Os
.Sh NAME
.Nm pkg
.Nd Image Packaging System
.Sh DESCRIPTION
The image packaging system,
.Nm Ns Sy (7) ,
is a framework that provides for software lifecycle management (installation,
upgrade, and removal).
Image packaging manages software in units of packages, which are collections of
actions, defined by a set of key/value pairs and possibly a data payload.
In many cases, actions are files found in a file system, but they also
represent other installable objects, such as drivers, services, and users.
.Sh PACKAGE FMRIS AND VERSIONS
Each package is represented by a fault management resource identifier (FMRI)
with the scheme
.Sy pkg\&: .
The full FMRI for a package consists of the scheme, a publisher, the package
name, and a version string in the following format:
.Bd -literal
pkg://omnios/terminal/tmux@3.1.2-151036.0:20201029T171510Z
.Ed
.Pp
In this example,
.Sy omnios
is the publisher and
.Sy terminal/tmux
is the package name.
Although the namespace is hierarchical and arbitrarily deep, there is no
enforced containment; the name is essentially arbitrary.
The publisher information is optional, but must be preceded by
.Sy pkg://
if present.
An FMRI that includes the publisher is often referred to as being "fully
qualified." If publisher information is not present, then the package name
should generally be preceded by
.Sy pkg:/ .
.Pp
Packaging clients often allow the scheme of an FMRI to be omitted if it does
not contain publisher information.
For example,
.Sy pkg:/terminal/tmux
can be written as
.Sy terminal/tmux .
If the scheme is omitted, clients also allow omission of all but the last
component of a package name for matching purposes.
For example,
.Sy terminal/tmux
could be written as just
.Sy tmux ,
which would then match packages named
.Sy tmux
or package names ending in
.Sy /tmux .
.Pp
A publisher name identifies a person, group of persons, or an organisation as
the source of one or more packages.
To avoid publisher name collisions and help identify the publisher, a best
practice is to use a domain name that represents the entity publishing the
packages as a publisher name.
.Pp
The version follows the package name, separated by an at sign (@).
The version consists of four sequences of numbers, separated by punctuation.
The elements in the first three sequences are separated by dots, and the
sequences are arbitrarily long.
Leading zeros in version components (for example,
.Pq for example, Sy 01.1 No or Sy 1.01
are not permitted.
Trailing zeros
.Pq for example, Sy 1.10
are permitted.
.Pp
The first part of the version is the component version.
For components tightly bound to the operating system, this is usually the value
of
.Ql uname -r
for that version of the operating system.
For a component with its own development lifecycle, this sequence is a dotted
release number, such as 2.4.10.
.Pp
The second part of the version, which if present must follow a comma
.Pq Sy \&, ,
is the build version.
The build version specifies what version of the operating system the contents
of the package were built on, providing a minimum bound on which operating
system version the contents can be expected to run successfully.
.Pp
The third part of the version, which if present must follow a hyphen
.Pq Sy \- ,
is the branch version.
The branch version is a versioning component that provides vendor-specific
information.
The branch version can be incremented when the packaging metadata is changed,
independently of the component version.
The branch version might contain a build number or other information.
.Pp
The fourth part of the version, which if present must follow a colon
.Pq Sy \&: ,
is a timestamp.
The timestamp represents when the package was published.
.Pp
When performing comparisons between versions, no component of the full version
is considered unless the components to its left are the same.
Thus,
.Sy 4.3-1
is greater than
.Sy 4.2-7
because
.Sy 4.3
is greater than
.Sy 4.2 ,
and
.Sy 4.3-3
is greater than
.Sy 4.3-1
because
.Sy 3
is greater than
.Sy 1 .
.Pp
The
.Sy pkg.human-version
attribute can be used to provide a human-readable version string.
The value of the
.Sy pkg.human-version
attribute can be provided in addition to the package version described above
for the package FMRI but cannot replace the package FMRI version.
The human-readable version string is only used for display purposes.
See "Set Actions" for more information.
.Pp
Many parts of the system, when appropriate, abridge FMRIs when displaying them,
and accept input in shorter forms to reduce the volume of information displayed
or required.
Typically, the scheme, publisher, build version, and timestamp can be elided.
Sometimes all of the versioning information can be omitted.
.Sh ACTIONS
Actions represent the installable objects on a system.
Actions are described in the manifest of a package.
Every action consists primarily of its name and a key attribute.
Together, these refer to a unique object as it follows a version history.
Actions can have other attributes.
Some attributes are interpreted directly by the packaging system.
Other attributes might be useful only to the system administrator or the
end-user.
.Pp
Actions have a simple text representation:
.Bd -ragged -offset indent
.Ar action_name
.Ar attribute1 Ns = Ns Ar value1
.Ar attribute2 Ns = Ns Ar value2
\&...
.Ed
.Pp
Names of attributes cannot have whitespace, quotation marks, or equals signs
.Pq Sy \&=
in them.
All characters after the first equals sign belong to the value.
Values can have all of those, though spaces must be enclosed in single or
double quotation marks.
Single quotation marks do not need to be escaped inside a string that is
enclosed in double quotation marks, and double quotation marks do not need to
be escaped inside a string that is enclosed in single quotation marks.
A quotation mark can be prefixed with a backslash
.Pq Sy \e
character to avoid terminating the quoted string.
A backslash can itself be escaped with a backslash.
.Pp
Actions can have multiple attributes.
Some attributes can be named multiple times with different values for a single
action.
Multiple attributes with the same name are treated as unordered lists.
.Pp
Actions with many attributes can create long lines in a manifest file.
Such lines can be wrapped by terminating each incomplete line with a backslash.
Note that this continuation character must occur between attribute/value pairs.
Neither attributes nor their values nor the combination can be split.
.Pp
The attributes listed below are not an exhaustive set.
In fact, the attributes that can be attached to an action are arbitrary, and
the standard sets of attributes are easy to augment to incorporate future
developments.
.Pp
Some attributes cause additional operations to be executed outside of the
packaging context.
These attributes are documented in the
.Sx Actuators
section below.
.Pp
Actions that are installed to a path must not deliver content to any of
the following paths:
.Bl -bullet -offset indent
.It
.Pa /system/volatile
.It
.Pa /tmp
.It
.Pa /var/share
.It
.Pa /var/tmp
.El
.Pp
Additionally, the following directories are reserved for use by the system
and should also not be used by actions:
.Bl -bullet -offset indent
.It
.Pa /var/pkg
.El
.\"
.Ss "File Actions"
The
.Sy file
action represents an ordinary file.
The
.Sy file
action references a payload, and has four standard attributes:
.Bl -tag -width 6n
.It Sy path
The file system path where the file is installed.
This is a
.Sy file
action's key attribute.
.It Sy mode
The access permissions (in numeric form) of the file.
These are simple permissions only, not ACLs.
.It Sy owner
The name of the user that owns the file.
.It Sy group
The name of the group that owns the file.
.El
.Pp
The payload is a positional attribute in that it is not named.
It is the first word after the action name.
In a published manifest, it is the
.Sy SHA-1
hash of the file contents.
If present in a manifest that has yet to be published, it represents the path
where the payload can be found.
See
.Xr pkgsend 1 .
The hash attribute can be used instead of the positional attribute, should the
value include an equals sign.
Both can be used in the same action, however, the hashes must be identical.
.Pp
The
.Sy preserve
and
.Sy overlay
attributes affect whether and how a
.Sy file
action is installed.
.Bl -tag -width 6n
.It Sy preserve
Specifies when and how files are preserved during package operations.
.Pp
When a package is initially installed, if a file delivered by the package has a
.Sy preserve
attribute defined with any value except
.Sy abandon
or
.Sy install-only
and the file already exists in the image, the existing file is stored in
.Pa /var/pkg/lost+found
and the packaged file is installed.
.Pp
When a package is initially installed, if a file delivered by the package has a
.Sy preserve
attribute defined and the file does not already exist in the image, whether
that file is installed depends on the value of the
.Sy preserve
attribute:
.Bl -bullet -offset indent
.It
If the value of
.Sy preserve
is
.Sy legacy
or
.Sy abandon ,
the packaged file is not installed.
.It
If the value of
.Sy preserve
is not
.Sy legacy
or
.Sy abandon ,
the packaged file is installed.
.El
.Pp
When a package is downgraded, if a file delivered by the downgraded version of
the package has a
.Sy preserve
attribute defined with any value except
.Sy abandon
or
.Sy install-only
and all of the following conditions are true, the file that currently exists in
the image is renamed with the extension
.Pa .update ,
and the file from the downgraded package is installed.
.Bl -bullet -offset indent
.It
The file exists in the image.
.It
The content of the file delivered by the downgraded version of the package is
different from the content of the file delivered by the currently installed
version of the package.
.It
The content of the file delivered by the downgraded version of the package is
different from the content of the file that exists in the image.
.El
.Pp
If any of the above conditions is not true, the file is treated the same as if
the package is being upgraded, rather than downgraded.
.Pp
When a package is upgraded, if a
.Sy file
action delivered by the upgraded version of the package has a
.Sy preserve
attribute defined with any value and the
.Sy file
action is the same as the
.Sy file
action delivered by the currently installed version of the package, the file is
not installed, and the file that exists in the image is not modified.
Any modifications made since the previous version was installed are preserved.
.Pp
When a package is upgraded, if a
.Sy file
action delivered by the upgraded version of the package has a
.Sy preserve
attribute defined and the
.Sy file
action is new or is different from the
.Sy file
action delivered by the currently installed version of the package, the upgrade
is done in the following way:
.Bl -bullet -offset indent
.It
If the file delivered by the upgraded version of the package has a
.Sy preserve
value of
.Sy abandon
or
.Sy install-only
in the upgraded package, the new file will not be installed and the existing
file will not be modified.
If the file delivered by the package has a
.Sy preserve
value of
.Sy abandon
then any attempt to revert the file will not restore the file.
Any
.Sy revert-tag
associated with the file will be ignored.
.It
If the file does not exist in the image, the new file is installed.
.It
If the file delivered by the upgraded version of the package exists in the
image, did not exist in the currently installed version of the package, and was
not renamed or moved by using the
.Sy original_name
attribute (see below), then the existing file is stored in
.Pa /var/pkg/lost+found
and the file delivered by the upgraded version of the package is installed.
.It
If the file delivered by the upgraded version of the package exists in the
image and has different content from the file delivered by the currently
installed version of the package, the upgrade is done according to the value of
the
.Sy preserve
attribute:
.Bl -bullet -offset indent
.It
If the file delivered by the upgraded version of the package has a
.Sy preserve
value of
.Sy renameold ,
the existing file is renamed with the extension
.Pa .old ,
and the new file is installed with updated permissions and timestamp (if
present).
See the
.Sy timestamp
attribute description below.
.It
If the file delivered by the upgraded version of the package has a
.Sy preserve
value of
.Sy renamenew ,
the new file is installed with the extension
.Pa .new
and the existing file is not modified.
.It
If the file delivered by the upgraded version of the package has a
.Sy preserve
value of
.Sy true ,
the new file is not installed, but the permissions and timestamp (if present)
are reset on the existing file.
.El
.It
If the file delivered by the upgraded version of the package exists in the
image, has the same content as the file delivered by the currently installed
version of the package, and has a
.Sy preserve
value of either
.Sy renameold
or
.Sy renamenew ,
the existing file is replaced by the file delivered by the upgraded version of
the package, including replacing permissions and timestamp (if present).
.It
If the file delivered by the upgraded version of the package exists in the
image, has a
.Sy preserve
value of
.Sy legacy
in the upgraded package, and has a different
.Sy preserve
value in the currently installed version of the package, the existing file is
renamed with the extension
.Pa .legacy ,
and the new file is installed with updated permissions and timestamp (if
present).
.It
If the file delivered by the upgraded version of the package exists in the
image and has a
.Sy preserve
value of
.Sy legacy
in both the upgraded package and the currently installed version of the
package, the permissions and timestamp (if present) are reset on the existing
file.
.El
.Pp
When a package is uninstalled, if a
.Sy file
action delivered by the currently installed version of the package has a
.Sy preserve
value of
.Sy abandon
or
.Sy install-only
and the file exists in the image, the file will not be removed.
.It Sy overlay
Specifies whether the action allows other packages to deliver a file at the
same location or whether it delivers a file intended to overlay another file.
This functionality is intended for use with configuration files that do not
participate in any self-assembly
.Pq for example, Pa /etc/motd
and that can be safely overwritten.
.Pp
If
.Sy overlay
is not specified, multiple packages cannot deliver files to the same location.
.Pp
The
.Sy overlay
attribute can have one of the following values:
.Bl -tag -width 6n
.It Sy allow
One other package is allowed to deliver a file to the same location.
This value has no effect unless the
.Sy preserve
attribute is also set.
.It Sy true
The file delivered by the action overwrites any other action that has specified
.Sy allow .
.El
.Pp
Changes to the installed file are preserved based on the value of the
.Sy preserve
attribute of the overlaying file.
On removal, the contents of the file are preserved if the action being overlaid
is still installed, regardless of whether the
.Sy preserve
attribute was specified.
Only one action can overlay another, and the
.Sy mode ,
.Sy owner ,
and
.Sy group
attributes must match.
.It Sy overlay-attributes
Specifies whether image-modifying operations such as install, update, etc.
should report errors when an overlaying action has a different
.Sy owner ,
.Sy group ,
.Sy mode
or
.Sy sysattr
from its overlaid action.
.Sy overlay-attributes
is usually used in actions with
.Sy overlay
equal to
.Sy allow
or
.Sy deny .
When the value of
.Sy overlay-attributes
for
either overlaying action or overlaid action is
.Sy deny ,
an error will be generated during image-modifying operations.
Also verification operations will generate an error on those mismatched
attributes:
.Sy owner ,
.Sy group
and
.Sy mode
if
.Sy overlay
is equal to
.Sy deny
for a pair of overlaid and overlaying action.
Otherwise, an info message will be generated on the above mismatched attributes
for the pair.
Regardless of the value of
.Sy overlay-attributes ,
mismatched attributes when comparing the on-disk
attributes of a file to its packaged version will always be reported as errors.
.It Sy dehydrate
Specifies whether this action should be removed when a package publisher's
packages are dehydrated or when a dehydrated publisher's packages are modified.
The value of the
.Sy dehydrate
attribute can be
.Sy true
or
.Sy false .
If the value of the
.Sy dehydrate
attribute is
.Sy false ,
the action will not be removed during dehydrate operations.
Otherwise, the action will be removed.
File actions tagged with the
.Sy preserve
or
.Sy overlay
attributes are implicitly excluded from dehydration operations and do not need
this attribute.
.Bd -literal -offset indent
file path=etc/zones/SYSdefault.xml dehydrate=false ...
.Ed
.El
.Pp
The following attributes are recognised for ELF files:
.Bl -tag -width 6n
.It Sy elfarch
The architecture of the ELF file.
This is the output of
.Ql uname -p
on the architecture for which the file is built.
.It Sy elfbits
This is
.Sy 32
or
.Sy 64 .
.It Sy elfhash
This is the hash of the "interesting" ELF sections in the file.
These are the sections that are mapped into memory when the binary is loaded.
These are the only sections necessary to consider when determining whether the
executable behaviour of two binaries will differ.
.El
.Pp
The following additional attributes are recognised for
.Sy file
actions:
.Bl -tag -width 6n
.It Sy original_name
This attribute is used to handle editable files moving from package to package
or from place to place, or both.
The form this takes is the name of the originating package, followed by a colon
and the original path to the file.
Any file being deleted is recorded either with its package and path, or with
the value of the
.Sy original_name
attribute if specified.
Any editable file being installed that has the
.Sy original_name
attribute set uses the file of that name if it is deleted as part of the same
packaging operation.
.It Sy release-note
This attribute is used to indicate that this file contains release note text.
The value of this attribute is a package FMRI.
If the FMRI specifies a package name that is present in the original image and
a version that is newer than the version of the package in the original image,
this file will be part of the release notes.
A special FMRI of
.Sy feature/pkg/self
refers to the containing package.
If the version of
.Sy feature/pkg/self
is 0, this file will only be part of the release notes on initial installation.
.It Sy revert-tag
This attribute is used to tag editable files that should be reverted as a set.
The value of the
.Sy revert-tag
attribute is a
.Ar tagname .
Multiple
.Sy revert-tag
attributes can be specified for a single
.Sy file
action.
The file reverts to its manifest-defined state when
.Sy pkg revert
is invoked with any of those tags specified.
See the
.Xr pkg 1
 man page for information about the
.Sy pkg revert
command.
.Pp
The
.Sy revert-tag
attribute can also be specified at the directory level.
See
.Sx Directory Actions
below.
.It Sy sysattr
This attribute is used to specify any system attributes that should be set for
this file.
The value of the
.Sy sysattr
attribute can be a comma-separated list of verbose system attributes or a
string sequence of compact system attribute options, as shown in the following
examples.
Supported system attributes are explained in the
.Xr chmod 1
man page.
System attributes specified in the manifest are set additionally to system
attributes that might have been set by other subsystems of the operating
system.
.Bd -literal -offset indent
file path=opt/secret_file sysattr=hidden,immutable
file path=opt/secret_file sysattr=Hi
.Ed
.It Sy timestamp
This attribute is used to set the access and modification time on the file.
The
.Sy timestamp
attribute value must be expressed in UTC in ISO-8601 format, omitting the
colons and hyphens.
.Pp
The
.Sy timestamp
attribute is essential when packaging
.Pa .pyc
or
.Pa .pyo
files for Python.
The related
.Pa .py
file for the
.Pa .pyc
or
.Pa .pyo
files must be marked with the timestamp embedded within those files, as shown
in the following example:
.Bd -literal -offset indent
file path=usr/lib/python/packages/pkg/__init__.pyc ...
file path=usr/lib/python/packages/pkg/__init__.py \e
    timestamp=20130311T221521Z ...
.Ed
.El
.Pp
The following attributes for
.Sy file
actions are automatically generated by the system and should not be specified
by package developers:
.Bl -tag -width 6n
.It Sy hash
The SHA-1 hash of the uncompressed file.
.It Sy chash
The SHA-1 hash of the compressed file.
.It Sy pkg.size
The size in bytes of the uncompressed file.
.It Sy pkg.csize
The size in bytes of the compressed file.
.El
.\"
.Ss "Directory Actions"
The
.Sy dir
action is like the
.Sy file
action in that it represents a file system object.
The
.Sy dir
action represents a directory instead of an ordinary file.
The
.Sy dir
action has the same
.Sy path ,
.Sy mode ,
.Sy owner ,
and
.Sy group
attributes that the
.Sy file
action has, and
.Sy path
is the key attribute.
The
.Sy dir
action also accepts the
.Sy revert-tag
attribute.
The value of the
.Sy revert-tag
attribute is different for
.Sy file
and
.Sy dir
actions.
.Pp
Directories are reference counted in IPS.
When the last package that either explicitly or implicitly references a
directory no longer does so, that directory is removed.
If that directory contains unpackaged file system objects, those items are
moved into
.Sy $IMAGE_META Ns Pa /lost+found .
See the
.Sx Files
section for more information about
.Sy $IMAGE_META .
.Bl -tag -width 6n
.It Sy revert-tag
This attribute is used to identify unpackaged files that should be removed as a
set.
See
.Sx File Actions
above for a description of how to specify this attribute for
.Sy file
actions.
For directories, the value of the
.Sy revert-tag
attribute is
.Ar tagname Ns = Ns Ar pattern .
Multiple
.Sy revert-tag
attributes can be specified for a single
.Sy dir
action.
When
.Sy pkg revert
is invoked with a matching
.Ar tagname ,
any unpackaged files or directories under this
.Sy dir
directory that match
.Ar pattern
(using shell globbing characters) are removed.
See the
.Xr pkg 1
man page for information about the
.Sy pkg revert
command.
.It Sy salvage-from
This attribute can be used to move unpackaged contents into a new directory.
The value of this attribute is the name of a directory of salvaged items.
A directory with a
.Sy salvage-from
attribute inherits on creation any contents of the directory named in the value
of the
.Sy salvage-from
attribute.
.El
.\"
.Ss Link Actions
The
.Sy link
action represents a symbolic link.
The
.Sy link
action has the following standard attributes:
.Bl -tag -width 6n
.It Sy path
The file system path where the symbolic link is installed.
This is a
.Sy link
action's key attribute.
.It Sy target
The target of the symbolic link.
The file system object to which the link resolves.
.It Sy preserve
Specifies when and how links are preserved during package operations.
.Pp
When a package is modified, if a link delivered by the package has a
.Sy preserve
attribute set to
.Sy true
and that link has been removed or modified in the image, then the packaged
link will not be installed.
.It Sy mediator
Specifies the entry in the mediation namespace shared by all path names
participating in a given mediation group
.Pq for example, Sy python .
Link mediation can be performed based on
.Sy mediator-version
and/or
.Sy mediator-implementation .
All mediated links for a given path name must specify the same mediator.
However, not all mediator versions and implementations need to provide a link
at a given path.
If a mediation does not provide a link, then the link is removed when that
mediation is selected.
A
.Sy mediator ,
in combination with a specific version and/or implementation represents a
mediation that can be selected for use by the packaging system.
.It Sy mediator-version
Specifies the version (expressed as a dot-separated sequence of non-negative
integers) of the interface described by the
.Sy mediator
attribute.
This attribute is required if
.Sy mediator
is specified and
.Sy mediator-implementation
is not.
A local system administrator can set the version to use explicitly.
The value specified should generally match the version of the package
delivering the link
.Po
for example,
.Sy runtime/python-39
should use
.Sy mediator-version=3.9
.Pc ,
although this is not required.
.It Sy mediator-implementation
Specifies the implementation of the mediator for use in addition to or instead
of the
.Sy mediator-version .
Implementation strings are not considered to be ordered and a string is
arbitrarily selected by
.Nm Ns (7)
if not explicitly specified by a system administrator.
.Pp
The value can be a string of arbitrary length composed of alphanumeric
characters and spaces.
If the implementation itself can be versioned or is versioned, then the version
should be specified at the end of the string, after a @ (expressed as a
dot-separated sequence of non-negative integers).
If multiple versions of an implementation exist, the default behaviour is to
select the implementation with the greatest version.
.Pp
If only one instance of an implementation mediation link at a particular path
is installed on a system, then that one is chosen automatically.
If future links at the path are installed, the link is not switched unless a
vendor, site, or local override applies, or if one of the links is version
mediated.
.It Sy mediator-priority
When resolving conflicts in mediated links,
.Nm Ns (7)
normally chooses the link with the greatest value of
.Sy mediator-version
or based on
.Sy mediator-implementation
if that is not possible.
This attribute is used to specify an override for the normal conflict
resolution process.
.Pp
If this attribute is not specified, the default mediator selection logic is
applied.
.Pp
If the value is
.Sy vendor ,
the link is preferred over those that do not have a
.Sy mediator-priority
specified.
.Pp
If the value is
.Sy site ,
the link is preferred over those that have a value of
.Sy vendor
or that do not have a
.Sy mediator-priority
specified.
.Pp
A local system administrator can override the selection logic described above.
.El
.\"
.Ss "Hardlink Actions"
The
.Sy hardlink
action represents a hard link.
It has the same attributes as the
.Sy link
action, and
.Sy path
is also its key attribute.
.\"
.Ss "Driver Actions"
The
.Sy driver
action represents a device driver.
The
.Sy driver
action does not reference a payload.
The driver files themselves must be installed as
.Sy file
actions.
The following attributes are recognised
.Po
see
.Xr add_drv 8
for more information
.Pc :
.Bl -tag -width 6n
.It Sy name
The name of the driver.
This is usually, but not always, the file name of the driver binary.
This is the
.Sy driver
action's key attribute.
.It Sy alias
This represents an alias for the driver.
A given driver can have more than one
.Sy alias
attribute.
No special quoting rules are necessary.
.It Sy class
This represents a driver class.
A given driver can have more than one
.Sy class
attribute.
.It Sy perms
This represents the file system permissions for the driver's device nodes.
.It Sy clone_perms
This represents the file system permissions for the clone driver's minor nodes
for this driver.
.It Sy policy
This specifies additional security policy for the device.
A given driver can have more than one
.Sy policy
attribute, but no minor device specification can be present in more than one
attribute.
.It Sy privs
This specifies privileges used by the driver.
A given driver can have more than one
.Sy privs
attribute.
.It Sy devlink
This specifies an entry in
.Pa /etc/devlink.tab .
The value is the exact line to go into the file, with tabs denoted by
.Sy \et .
See
.Xr devlinks 8
for more information.
A given driver can have more than one
.Sy devlink
attribute.
.El
.\"
.Ss "Depend Actions"
The
.Sy depend
action represents an inter-package dependency.
A package can depend on another package because the first requires
functionality in the second for the functionality in the first to work, or even
to install.
Dependencies can be optional.
If a dependency is not met at the time of installation, the packaging system
attempts to install or update the dependent package to a sufficiently new
version, subject to other constraints.
.Pp
The following attributes are recognised:
.Bl -tag -width 6n
.It Sy fmri
The FMRI representing the dependent package.
This is the
.Sy dependency
action's key attribute.
The
.Sy fmri
value must not include the publisher.
The package name is assumed to be complete.
Dependencies of type
.Sy group-any
and
.Sy require-any
can have multiple
.Sy fmri
attributes.
A version is optional on the
.Sy fmri
value, though for some types of
dependencies, an
.Sy fmri
with no version has no meaning or the version is
ignored.
.It Sy type
The type of the dependency.
.Bl -tag -width 6n
.It Sy require
The dependency is required and must have a version equal to or greater than the
version specified in the
.Sy fmri
attribute.
If the version is not specified, any version satisfies the dependency.
A package cannot be installed if any of its required dependencies cannot be
satisfied.
.It Sy optional
The dependency, if present, must be at the specified version level or greater.
.It Sy exclude
The containing package cannot be installed if the dependency is present at the
specified version level or greater.
If no version is specified, the dependent package cannot be installed
concurrently with the package specifying the dependency.
.It Sy incorporate
The dependency is optional, but the version of the dependent package is
constrained.
See
.Sx Constraints and Freezing
below.
.It Sy require-any
Any one of the packages specified by multiple
.Sy fmri
attributes can satisfy the dependency, following the same rules as the
.Sy require
dependency type.
.It Sy group-any
Any one of multiple dependent packages as specified by multiple
.Sy fmri
attributes can satisfy the dependency, following the
same rules as the
.Sy group
dependency type with the exception that non-obsolete package stems are
preferred over obsolete ones.
.It Sy conditional
The dependency is required only if the package defined by the
.Sy predicate
attribute is present on the system.
.It Sy origin
Prior to installation of this package, the dependency target must, if present,
be at the specified value or greater on the image to be modified.
If the value of the
.Sy root-image
attribute is
.Sy true ,
the target must be present on the image rooted at / in order to install this
package.
If the value of the
.Sy root-image
attribute is
.Sy true
and the value of the
.Sy fmri
attribute starts with
.Sy pkg:/feature/firmware/ ,
the remainder of the
.Sy fmri
value is treated as a command in
.Pa /usr/lib/fwenum
.It Sy group
The dependency is required unless the package is on the image avoid list.
Note that obsolete packages silently satisfy the group dependency.
See the
.Sy avoid
subcommand in
.Xr pkg 1 .
.It Sy parent
The dependency is ignored if the image is not a child image.
If the image is a child image then the dependency is required to be present in
the parent image.
The package version matching for a
.Sy parent
dependency is the same as that used for
.Sy incorporate
dependencies.
.El
.It Sy predicate
The FMRI representing the predicate for
.Sy conditional
dependencies.
.It Sy root-image
Has an effect only for
.Sy origin
dependencies as mentioned above.
.El
.\"
.Ss "License Actions"
The
.Sy license
action represents a license or other informational file associated with the
package contents.
A package can deliver licenses, disclaimers, or other guidance to the package
installer through the use of the
.Sy license
action.
.Pp
The payload of the
.Sy license
action is delivered into the image metadata directory related to the package,
and should only contain human-readable text data.
It should not contain HTML or any other form of markup.
Through attributes,
.Sy license
actions can indicate to clients that the related payload must be displayed
and/or require acceptance of it.
The method of display and/or acceptance is at the discretion of clients.
.Pp
The following attributes are recognised:
.Bl -tag -width 6n
.It Sy license
This is a
.Sy license
action's key attribute.
This attribute provides a meaningful description for the license to assist
users in determining the contents without reading the license text itself.
Some example values include:
.Bl -bullet -offset indent
.It
GPLv3
.It
BSD-2-Clause-Patent
.El
.Pp
The
.Sy license
value must be unique within a package.
Including the version of the license in the description, as shown in several of
the examples above, is recommended.
If a package has code under multiple licenses, use multiple
.Sy license
actions.
The length of the license attribute value should not be more than 64 characters.
.It Sy must-accept
When
.Sy true ,
this license must be accepted by a user before the related package can be
installed or updated.
Omission of this attribute is equivalent to it being set to
.Sy false .
The method of acceptance (interactive or configuration-based, for example) is
at the discretion of clients.
For package updates, this attribute is ignored if the license action or payload
has not changed.
.It Sy must-display
When
.Sy true ,
the action's payload must be displayed by clients during packaging operations.
Omission of this value is equivalent to it being set to
.Sy false .
.Pp
This attribute should not be used for copyright notices.
This attribute should only be used for licenses or other material that must be
displayed during operations.
The method of display is at the discretion of clients.
For package updates, this attribute is ignored if the license action or payload
has not changed.
.El
.\"
.Ss "Legacy Actions"
The
.Sy legacy
action represents package data used by a legacy packaging system.
The attributes associated with this action are added into the legacy system's
databases so that the tools querying those databases can operate as if the
legacy package were actually installed.
In particular, this should be sufficient to convince the legacy system that the
package named by the
.Sy pkg
attribute is installed on the system, so that the package can be used to
satisfy dependencies.
.Pp
The following attributes, named in accordance with the parameters on
.Xr pkginfo 7 ,
are recognised:
.Bl -tag -width 6n
.It Sy category
The value for the
.Sy CATEGORY
parameter.
The default value is
.Sy system .
.It Sy desc
The value for the
.Sy DESC
parameter.
.It Sy hotline
The value for the
.Sy HOTLINE
parameter.
.It Sy name
The value for the
.Sy NAME
parameter.
The default value is
.Sy none provided .
.It Sy pkg
The abbreviation for the package being installed.
The default value is the name from the FMRI of the package.
This is a
.Sy legacy
action's key attribute.
.It Sy vendor
The value for the
.Sy VENDOR
parameter.
.It Sy version
The value for the VERSION parameter.
The default value is the version from the FMRI of the package.
.El
.\"
.Ss "Set Actions"
The
.Sy set
action represents a package-level attribute, or metadata, such as the package
description.
.Pp
The following attributes are recognised:
.Bl -tag -width 6n
.It Sy name
The name of the attribute.
.It Sy value
The value given to the attribute.
.El
.Pp
The
.Sy set
action can deliver any metadata the package author chooses.
However, there are a number of well defined attribute names that have specific
meaning to the packaging system.
.Bl -tag -width 6n
.It Sy info.classification
One or more tokens that a
.Nm Ns (7)
client can use to classify the package.
The value should have a scheme
.Po such as
.Dq org.opensolaris.category.2008
or
.Dq org.acm.class.1998
.Pc
and the actual classification, such as
.Dq Applications/Games ,
separated by a colon (:).
.It Sy pkg.description
A detailed description of the contents and functionality of the package,
typically a paragraph or so in length.
.It Sy pkg.fmri
The name and version of the containing package.
See
.Sx Package FMRIs and Versions
in the
.Sx Description
section.
.It Sy pkg.human-version
The version scheme used by IPS is strict.
See
.Sx Package FMRIs and Versions
in the
.Sx Description
section.
A more flexible version can be provided as the value of the
.Sy pkg.human-version
attribute.
The value is displayed by IPS tools such as
.Sy pkg info ,
.Sy pkg contents ,
and
.Sy pkg search .
The
.Sy pkg.human-version
value is not used as a basis for version comparison and cannot be used in place
of the
.Sy pkg.fmri
version.
.It Sy pkg.obsolete
When
.Sy true ,
the package is marked obsolete.
An obsolete package can have no actions other than more set actions, and must
not be marked renamed.
.It Sy pkg.renamed
When
.Sy true ,
the package has been renamed.
There must be one or more
.Sy depend
actions in the package as well that point to the package versions to which this
package has been renamed.
A package cannot be marked both renamed and obsolete, but otherwise can have
any number of set actions.
.It Sy pkg.legacy
When
.Sy true ,
the package is marked legacy, meaning that it will be removed in the future.
.It Sy pkg.summary
A short, one-line description of the package.
.El
.\"
.Ss "Group Actions"
The
.Sy group
action defines a UNIX group as defined in
.Xr group 7 .
No support is present for group passwords.
Groups defined with this action initially have no user list.
Users can be added with the
.Sy user
action.
The following attributes are recognised:
.Bl -tag -width 6n
.It Sy groupname
The value for the name of the group.
.It Sy gid
The group's unique numerical id.
The default value is the first free group under 100.
.El
.\"
.Ss "User Actions"
The
.Sy user
action defines a UNIX user as defined in
.Pa /etc/passwd ,
.Pa /etc/shadow ,
.Pa /etc/group ,
and
.Pa /etc/ftpd/ftpusers
files.
Entries are added to the appropriate files for users defined with this
.Sy user
action.
.Pp
The
.Sy user
action is intended to define a user for a daemon or other software to use.
Do not use the
.Sy user
action to define administrative or interactive accounts.
.Pp
The following attributes are recognised:
.Bl -tag -width 6n
.It Sy username
The unique name of the user
.It Sy password
The encrypted password of the user.
Default value is
.Sy \&*LK* .
See
.Xr shadow 7 .
The special value
.Sy UP
can be used to indicate that the
.Xr passwd 1
command may be used to set a login password for the user/role account.
When
the value of
.Sy UP
is listed in the manifest a
.Sy pkg verify
will not
report an unexpected change and
.Sy pkg fix
will not change the value back to that of the manifest.
.It Sy uid
The unique uid of the user.
Default value is first free value under 100.
.It Sy group
The name of the user's primary group.
Must be found in
.Pa /etc/group .
.It Sy gcos-field
The value of the
.Sy gcos
field in
.Pa /etc/passwd .
Default value is
.Sy username .
.It Sy home-dir
The user's home directory.
This directory must be in the system image directories and not under another
mount point such as
.Pa /home .
Default value is
.Sq Pa / .
.It Sy login-shell
The user's default shell.
Default value is empty.
.It Sy group-list
Secondary groups to which the user belongs.
See
.Xr group 7 .
.It Sy ftpuser
Can be set to
.Sy true
or
.Sy false .
The default value of
.Sy true
indicates that the user is permitted to login via FTP.
See
.Xr ftpusers 7 .
.It Sy lastchg
The number of days between January 1, 1970, and the date that the password was
last modified.
Default value is empty.
See
.Xr shadow 7 .
.It Sy min
The minimum number of days required between password changes.
This field must be set to 0 or above to enable password aging.
Default value is empty.
See
.Xr shadow 7 .
.It Sy max
The maximum number of days the password is valid.
Default value is empty.
See
.Xr shadow 7 .
.It Sy warn
The number of days before password expires that the user is warned.
See
.Xr shadow 7 .
.It Sy inactive
The number of days of inactivity allowed for that user.
This is counted on a per-machine basis.
The information about the last login is taken from the machine's
.Sy lastlog
file.
See
.Xr shadow 7 .
.It Sy expire
An absolute date expressed as the number of days since the UNIX Epoch (January
1, 1970).
When this number is reached, the login can no longer be used.
For example, an expire value of 13514 specifies a login expiration of January
1, 2007.
See
.Xr shadow 7 .
.It Sy flag
Set to empty.
See
.Xr shadow 7 .
.El
.\"
.Sh ACTUATORS
In certain contexts, additional operations can be appropriate to execute in
preparation for or following the introduction of a particular action.
These additional operations are operating system specific and are generally
needed only on a live system image.
A live image is the image mounted at
.Sq /
of the active, running boot environment of the current zone.
When multiple actions involved in a package installation or removal have
identical actuators, then the operation corresponding to actuator presence is
executed once for that installation or removal.
.Pp
Incorrectly specified actuators can result in package installation failure if
the actuator cannot determine a means of making safe installation progress.
.Pp
The following actuators are defined:
.Bl -tag -width 6n
.It Sy reboot-needed
Can be set to
.Sy true
or
.Sy false .
This actuator declares that update or removal of the tagged action must be
performed in a new boot environment if the package system is operating on a
live image.
Creation of a new boot environment is controlled by the
.Sy be-policy
image property.
See the "Image Properties" section in the
.Xr pkg 1
man page for more information about the
.Sy be-policy
property.
.It Sy disable_fmri , Sy refresh_fmri , Sy restart_fmri , Sy suspend_fmri
Each of these actuators takes the value of an FMRI of a service instance to
operate on during the package installation or removal.
.Sy disable_fmri
causes the given FMRI to be disabled prior to action removal, per the
.Sy disable
subcommand to
.Xr svcadm 8 .
.Sy refresh_fmri
and
.Sy restart_fmri
cause the given FMRI to be refreshed or restarted after action installation,
update, or removal per the respective subcommands of
.Xr svcadm 8 .
Finally,
.Sy suspend_fmri
causes the given FMRI to be disabled temporarily prior to the action install
phase, and then enabled after the completion of that phase.
.Pp
The value can contain a pattern that matches multiple service instances.
However, it must do so explicitly with a glob as accepted by
.Xr svcs 1 ,
rather than doing so implicitly by not indicating any instances.
.\"
.El
.Sh MEDIATIORS
A mediator is a name that represents a set of related symbolic or hard links.
If two or more link actions have the same path and mediator name, the user or
the package system selects the link target based on version, implementation, or
priority.
See
.Sx Link Actions
for information about mediator attributes.
.Pp
The following example shows two different instances of a mediator named
.Sy java
where the link choices are between versions.
These two
.Sy link
actions would appear in two different packages.
.Bd -literal -offset xxxx
link mediator=java mediator-version=1.6 path=usr/java target=jdk1.6
link mediator=java mediator-version=1.7 path=usr/java target=jdk1.7
.Ed
.Pp
See the
.Sy set-mediator
subcommand in the
.Xr pkg 1
man page for information about how to select the version you want for this link
path.
To have a choice of versions, both packages must be installed.
.\"
.Sh CONSTRAINTS AND FREEZING
When a package is transitioned to a new version, or when it is added to or
removed from the system, the version that is chosen, or whether removal is
allowed, is determined by a variety of constraints put on the package.
Those constraints can be defined by other packages in the form of dependencies,
or by the administrator in the form of freezes.
.Pp
The most common form of constraint is delivered by the
.Sy require
dependency, as described in
.Sx Depend Actions
above.
Such a constraint prevents the package from being downgraded or removed.
.Pp
Most parts of the operating system are encapsulated by packages called
.Sy incorporations .
These packages primarily deliver constraints represented by the
.Sy incorporate
dependency.
.Pp
As described above, an incorporated package need not be present on the system,
but if it is, then it specifies both an inclusive minimum version and an
exclusive maximum version.
For example, if the dependent FMRI has a version of 1.4.3, then no version less
than 1.4.3 would satisfy the dependency, and neither would any version greater
than or equal to 1.4.4.
However, versions that merely extended the dotted sequence, such as 1.4.3.7,
would be allowed.
.Pp
Incorporations are used to force parts of the system to upgrade synchronously.
For some components, such as the C library and the kernel, this is a basic
requirement.
For others, such as a simple userland component on which nothing else has a
dependency, the synchronous upgrade is used merely to provide a known and
tested set of package versions that can be referred to by a particular version
of the incorporation.
.Pp
Since an incorporation is simply a package, it can be removed, and all the
constraints it delivers are therefore relaxed.
However, many of the incorporations delivered by OmniOS are required by the
packages they incorporate because that relaxation would not be safe.
.Pp
Attempting an upgrade of a package to a version that is not allowed by an
installed incorporation will not attempt to find a newer version of the
incorporation in order to satisfy the request, but will instead fail.
If the constraint itself must be moved, and the incorporation specifying it
cannot be removed, then the incorporation must be upgraded to a version that
specifies a desired version of the constraint.
Upgrading an incorporation causes all of the incorporated packages that would
not satisfy the constraints delivered by the new version to be upgraded as
well.
.Pp
A system administrator can constrain a package by using the
.Sy pkg freeze
command.
The named package is constrained to the version installed on the system if no
version is provided.
If a versioned package is provided, then this administrative constraint, or
freeze, acts as if an incorporate dependency were installed where the
.Sy fmri
attribute had the value of the provided package version.
.Pp
A freeze is never lifted automatically by the packaging system.
To relax a constraint, use the
.Sy pkg unfreeze
command.
.\"
.Sh PUBLISHERS AND REPOSITORIES
As detailed above, a publisher is simply a name that package clients use to
identify the provider of packages.
Publishers can distribute their packages using package repositories and/or
package archives.
There are two types of repositories currently supported by the package system:
origin repositories and mirror repositories.
.Pp
An
.Sy origin
is a package repository that contains all of the metadata (such as catalogues,
manifests, and search indexes) and content (files) for one or more packages.
If multiple origins are configured for a given publisher in an image, the
package client API attempts to choose the best origin to retrieve package data
from.
This is the most common type of repository, and is implicitly created whenever
.Sy pkgsend
or
.Sy pkgrecv
is used on a package repository.
.Pp
A
.Sy mirror
is a package repository that contains only package content (files).
If one or more mirrors are configured for a given publisher in an image, the
client API prefers the mirrors for package content retrieval and attempts to
choose the best one to retrieve package content from.
If the mirror is unreachable, does not have the required content, or is slower,
the client API retrieves the content from any configured origin repositories.
Mirrors are intended for content sharing among a trusted set of clients using
the dynamic mirror functionality of
.Xr pkg.depotd 8 .
Mirrors are also intended to be used to authenticate access to package
metadata, but distribute the package content without authentication.
For example, a client might be configured with an
.Sy https
origin that requires an SSL key and certificate pair to access, and with an
.Sy http
mirror that provides the package content.
In this way, only authorised clients can install or update the packages, while
the overhead of authentication for package content retrieval is avoided.
A mirror can be created by removing all subdirectories of a repository except
those named
.Sy file
and their parents.
An origin repository can be also be provisioned as a mirror by using the mirror
mode of
.Xr pkg.depotd 8 .
.\"
.Sh GLOBAL AND NON-GLOBAL ZONE UPDATE
The
.Nm
system forces non-global zones to be kept in sync with the global zone.
This means that certain packages must be at the same version in the global zone
and all non-global zones to ensure the same kernel is run.
To do this,
.Nm
uses
.Sy parent
dependencies to impose certain constraints on non-global zones.
See
.Sx Depend Actions
above for more information about
.Sy parent
dependencies.
.Pp
Because of restrictions that the global zone imposes on non-global zones, the
non-global zones must have access to the packages of the global zone and must
have a similar publisher configuration.
Both of these objectives are achieved by using a
.Sy system repository
.Po see the
.Xr pkg.sysrepo 8
man page
.Pc .
The system repository provides access to the publishers configured in the
global zone and information about how those publishers are configured.
To prevent non-global zones from choosing different packages during
installation or update, system publishers are ranked higher in the publisher
search order than publishers configured in the non-global zone.
See the
.Sy pkg set-publisher
command in the
.Xr pkg 1
man page for information about publisher search order.
.Pp
To update all non-global zones on the system, use the
.Sy pkg update
command with no arguments in the global zone.
This command operates on the global zone and on each non-global zone
recursively.
The minimal changes necessary are made to non-global zones to bring them in
sync with the changes made in the global zone.
For example, suppose package
.Sy foo
is installed at version 1 in both the global zone and non-global zones, and
suppose version 2 is available in a system repository.
If
.Sy foo
has a parent dependency, then
.Sy pkg update foo
updates
.Sy foo
to version 2 in both the global zone and the non-global zones because the
.Sy parent
dependency forces the package to stay in sync.
If
.Sy foo
does not have a parent dependency, then
.Sy foo
is updated to version 2 in the global zone but remains at version 1 in the
non-global zones.
.\"
.Sh FACETS AND VARIANTS
Software can have components that are optional and components that are mutually
exclusive.
Examples of optional components include locales and documentation.
Examples of mutually exclusive components include architecture
.Pq e.g. SPARC or x86
and debug or non-debug binaries.
.Pp
In IPS, optional components are called
.Sy facets
and mutually exclusive components are called
.Sy variants .
Facets and variants are specified as tags on package actions.
Each facet and variant tag has a name and a value.
A single action can have multiple facet and variant tags.
Examples of components with multiple facet and variant tags include an
architecture-specific header file that is used by developers, or a component
that is only for a SPARC global zone.
.Pp
An example of a variant tag is
.Sy variant.arch=sparc .
An example of a facet tag is
.Sy facet.devel=true .
Facets and variants are often referred to without the leading
.Sq Sy facet\&.
and
.Sq Sy variant\&. .
.Pp
Facets and variants are special properties of the image and cannot be set on
individual packages.
To view the current values of the facets and variants set on the image, use the
.Sy pkg facet
and
.Sy pkg variant
commands as shown in the
.Xr pkg 1
man page.
To modify the values of the facets and variants set on the image, use the
.Sy pkg change-facet
and
.Sy pkg change-variant
commands.
.Pp
Facets are treated as boolean values by package clients: Facets can be set only
to
.Sy true
(enabled) or
.Sy false
(disabled) in the image.
By default, all facets are considered to be set to
.Sy true
in the image except for those that begin with
.Sq Sy facet.debug.
or
.Sq Sy facet.optional. .
.Pp
Facets can be either set locally within an image using the
.Sy pkg change-facet
command or inherited from a parent image.
For example, a non-global zone can inherit a facet from the global zone.
Inherited facets are evaluated before, and take priority over, any locally set
facets.
If the same facet is both inherited and locally set, the inherited facet value
masks the locally set value.
Masked facets have no effect on facet evaluation and package actions.
Facet changes made by using the
.Sy pkg change-facet
command only affect locally set facets.
Inherited facets can only be changed by making the change in the parent image.
By default, the
.Sy pkg facet
command does not display masked facets.
.Pp
The value of a facet tag on an action can be set to
.Sy all
or
.Sy true
to control how clients filter faceted actions.
All values other than
.Sy all
or
.Sy true
have undefined behaviour.
See below for a description of the conditions that must exist in the image to
install an action that has facet tags.
.Pp
The
.Sy all
value for a facet is useful when more than a single level of filtering is
required.
In the following example,
.Pa foo.txt
is installed only if the
.Sy doc
facet and at least one of the
.Sy locale
facets is
.Sy true
in the image.
This enables administrators to exclude documentation, but still enable or
disable support for specific locales.
In addition,
.Pa api.txt
is only installed if both the
.Sy doc
and
.Sy devel
facets are
.Sy true
in the image.
.Bd -literal -offset indent
file path=usr/share/doc/foo/foo.txt facet.doc=all \e
    facet.locale.en_GB=true facet.locale.en_US=true
file path=usr/share/doc/foo/api.txt facet.doc=all facet.devel=all
.Ed
.Pp
A facet set on the image can be a full facet such as
.Sy doc.man
or a pattern such as
.Sy locale.* .
This is useful when you want to disable a portion of the facet namespace, and
only enable individual facets within it.
For example, you could disable all locales and then only enable one or two
specific locales, as shown in the following example:
.Bd -literal -offset indent
# pkg change-facet locale.*=false
[output about packages being updated]
# pkg change-facet locale.en_US=true
[output about packages being updated]
.Ed
.Pp
Most variants can have any number of values.
For example, the
.Sy arch
variant can be set to
.Sy i386 ,
.Sy sparc ,
.Sy ppc ,
.Sy arm ,
.Sy aarch64 ,
or whatever architectures the distribution supports
.Po only
.Sy i386
and
.Sy aarch64
are used in OmniOS
.Pc .
The exceptions are the
.Sy debug
variants.
The
.Sy debug
variants should only be set to
.Sy true
or
.Sy false ;
other values have undefined behaviour.
If a file action has both non-debug and debug versions, both versions must have
the applicable
.Sy debug
variant explicitly set, as shown in the following example:
.Bd -literal -offset indent
file group=sys mode=0644 overlay=allow owner=root \e
    path=etc/motd pkg.csize=115 pkg.size=103 preserve=true \e
    variant.debug.osnet=true
file group=sys mode=0644 overlay=allow owner=root \e
    path=etc/motd pkg.csize=68 pkg.size=48 preserve=true \e
    variant.debug.osnet=false
.Ed
.Pp
The variant value must be set on the image in order for a package using the
variant to be installed; by default all unspecified variants have the value
.Sy false ,
which may or may not make the package installable.
The
.Sy arch
and
.Sy zone
variants are set by the program that creates the image and installs its initial
contents.
The
.Sy debug.*
variants are
.Sy false
in the image by default.
.Pp
The facets and variants set on the image affect whether a particular action is
installed.
.Bl -bullet
.It
Actions with no facet or variant tags are always installed.
.It
Actions with facet tags are installed if the following conditions exist in the
image:
.Bl -bullet
.It
All facet tags on the action that have a value of
.Sy all
are
.Sy true
in the image
.Po
.Sy true
is the default
.Pc .
.It
If any facet tags on the action have a value of
.Sy true ,
at least one of those facets is
.Sy true
in the image.
.El
.It
Actions with variant tags are installed only if the values of all the variant
tags are the same as the values set in the image.
.It
Actions with both facet and variant tags are installed if both the facets and
the variants allow the action to be installed.
.El
.Pp
You can create your own facet and variant tags.
The following tags are in common use.
.Bl -column -offset indent xxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxx
.It Variant Name Ta Possible Values
.It ------------ Ta ---------------
.It Sy variant.arch Ta Sy sparc, i386
.It Sy variant.opensolaris.zone Ta Sy global, nonglobal
.It Sy variant.debug.* Ta Sy true, false
.El
.Pp
The following list shows a small sample of the facet tags that are used:
.Bl -column -offset indent xxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxx
.It facet.devel Ta facet.doc
.It facet.doc.html Ta facet.doc.info
.It facet.doc.man Ta facet.doc.pdf
.It facet.locale.de Ta facet.locale.en_GB
.It facet.locale.en_US Ta facet.locale.fr
.It facet.locale.ja_JP Ta facet.locale.zh_CN
.El
.\"
.Sh IMAGE POLICIES
Image policies are defined by image properties with boolean values.
See "Image Properties" in the
.Xr pkg 1
man page for descriptions of the
.Sy flush-content-cache-on-success
and
.Sy send-uuid
properties and information about how to view and modify their values.
.\"
.Sh FILES
Since
.Nm Ns (7)
images can be located arbitrarily within a larger file system, the token
.Sy $IMAGE_ROOT
is used to distinguish relative paths.
For a typical system installation,
.Sy $IMAGE_ROOT
is equivalent to
.Sq / .
.Bl -tag -width 6n
.It Sy $IMAGE_ROOT Ns Pa /var/pkg
Metadata directory for a full or partial image.
.It Sy $IMAGE_ROOT Ns Pa /.org.opensolaris,pkg
Metadata directory for a user image.
.El
.Pp
Within the metadata of a particular image, certain files and directories can
contain information useful during repair and recovery.
The token
.Sy $IMAGE_META
is used to refer to the top-level directory that contains the metadata.
.Sy $IMAGE_META
is typically one of the two paths given above.
.Bl -tag -width 6n
.It Sy $IMAGE_META Ns Pa /lost+found
Location of conflicting directories and files moved during a package operation.
.It Sy $IMAGE_META Ns Pa /publisher
Contains a directory for each publisher.
Each directory stores publisher-specific metadata.
.El
.Pp
Other paths within the
.Sy $IMAGE_META
directory hierarchy are Private, and are subject to change.
.\"
.Sh INTERFACE STABILITY
.Sy Uncommitted .
.\"
.Sh SEE ALSO
.Xr chmod 1 ,
.Xr passwd 1 ,
.Xr pkg 1 ,
.Xr pkgsend 1 ,
.Xr svcs 1 ,
.Xr ftpusers 7 ,
.Xr group 7 ,
.Xr pkginfo 7 ,
.Xr shadow 7 ,
.Xr add_drv 8 ,
.Xr devlinks 8 ,
.Xr pkg.depotd 8 ,
.Xr pkg.sysrepo 8 ,
.Xr svcadm 8
